<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Music Mood Interface</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Arial', sans-serif;
    }
    
    body {
      background-color: #f0e9e9;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }
    
    nav {
      display: flex;
      justify-content: space-between;
      padding: 15px;
      background-color: #ffffff;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .nav-links {
      display: flex;
      gap: 20px;
    }
    
    .nav-links a {
      text-decoration: none;
      color: #333;
      font-weight: 500;
    }
    
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      flex: 1;
      padding: 20px;
    }
    
    .ai-assistant {
      width: 120px;
      height: 120px;
      background-color: #e0e0e0;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 20px 0;
      position: relative;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .face {
      position: relative;
      width: 60px;
      height: 60px;
    }
    
    .eyes {
      display: flex;
      justify-content: space-between;
      width: 100%;
      position: absolute;
      top: 20px;
    }
    
    .eye {
      width: 18px;
      height: 18px;
      background-color: #41b6e6;
      border-radius: 50%;
    }
    
    .mouth {
      width: 30px;
      height: 15px;
      border-bottom: 3px solid #41b6e6;
      border-radius: 50%;
      position: absolute;
      bottom: 10px;
      left: 15px;
    }
    
    .search-container {
      width: 100%;
      max-width: 500px;
      margin: 20px 0;
      position: relative;
    }
    
    .search-input {
      width: 100%;
      padding: 12px 40px 12px 15px;
      border-radius: 25px;
      border: 1px solid #ccc;
      font-size: 16px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .search-btn {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      cursor: pointer;
    }
    
    .category-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 15px;
      width: 100%;
      max-width: 600px;
      margin-top: 20px;
    }
    
    .category-card {
      background-color: #e0e0e0;
      border-radius: 10px;
      height: 100px;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      transition: transform 0.3s, box-shadow 0.3s;
    }
    
    .category-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .category-card.active {
      background-color: #ffccd1;
    }
    
    .player-container {
      width: 100%;
      max-width: 500px;
      margin-top: 30px;
      display: none;
    }
    
    .player {
      background-color: #fff;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .player-info {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .player-image {
      width: 60px;
      height: 60px;
      background-color: #e0e0e0;
      border-radius: 5px;
      margin-right: 15px;
    }
    
    .player-details h3 {
      margin: 0;
      font-size: 18px;
    }
    
    .player-details p {
      margin: 5px 0 0;
      color: #777;
      font-size: 14px;
    }
    
    .player-controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .control-buttons {
      display: flex;
      gap: 15px;
    }
    
    .control-button {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #f0f0f0;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      border: none;
    }
    
    .play-button {
      background-color: #333;
      color: white;
    }
    
    .progress-container {
      height: 5px;
      background-color: #e0e0e0;
      border-radius: 5px;
      margin-top: 15px;
      position: relative;
    }
    
    .progress-bar {
      height: 100%;
      background-color: #41b6e6;
      border-radius: 5px;
      width: 0%;
      transition: width 0.1s linear;
    }
    
    @media (max-width: 768px) {
      .category-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    
    @media (max-width: 480px) {
      .category-grid {
        grid-template-columns: 1fr;
      }
      
      .ai-assistant {
        width: 100px;
        height: 100px;
      }
    }
  </style>
</head>
<body>
  <nav>
    <div class="nav-links">
      <a href="#">Home</a>
      <a href="#">About</a>
    </div>
    <div class="nav-links">
      <a href="#">Features</a>
    </div>
  </nav>
  
  <div class="container">
    <div class="ai-assistant">
      <div class="face">
        <div class="eyes">
          <div class="eye"></div>
          <div class="eye"></div>
        </div>
        <div class="mouth"></div>
      </div>
    </div>
    
    <div class="search-container">
      <input type="text" class="search-input" placeholder="Search...">
      <button class="search-btn">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
    </div>
    
    <div class="category-grid">
      <div class="category-card" data-category="sad">SAD</div>
      <div class="category-card" data-category="happy">HAPPY</div>
      <div class="category-card" data-category="rap">
        RAP<br>MUSIC
      </div>
      <div class="category-card" data-category="pop">POP</div>
      <div class="category-card active" data-category="features">Features</div>
      <div class="category-card" data-category="contact">Contact</div>
    </div>
    
    <div class="player-container">
      <div class="player">
        <div class="player-info">
          <div class="player-image"></div>
          <div class="player-details">
            <h3 id="song-title">Song Title</h3>
            <p id="song-artist">Artist</p>
          </div>
        </div>
        <div class="player-controls">
          <div class="control-buttons">
            <button class="control-button" id="prev-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="19 20 9 12 19 4 19 20"></polygon>
                <line x1="5" y1="19" x2="5" y2="5"></line>
              </svg>
            </button>
            <button class="control-button play-button" id="play-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" id="play-icon">
                <polygon points="5 3 19 12 5 21 5 3"></polygon>
              </svg>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" id="pause-icon" style="display: none;">
                <rect x="6" y="4" width="4" height="16"></rect>
                <rect x="14" y="4" width="4" height="16"></rect>
              </svg>
            </button>
            <button class="control-button" id="next-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="5 4 15 12 5 20 5 4"></polygon>
                <line x1="19" y1="5" x2="19" y2="19"></line>
              </svg>
            </button>
          </div>
          <span id="current-time">0:00</span>
        </div>
        <div class="progress-container">
          <div class="progress-bar"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.querySelector('.search-input');
      const searchBtn = document.querySelector('.search-btn');
      const categoryCards = document.querySelectorAll('.category-card');
      const playerContainer = document.querySelector('.player-container');
      const songTitle = document.getElementById('song-title');
      const songArtist = document.getElementById('song-artist');
      const playBtn = document.getElementById('play-btn');
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const playIcon = document.getElementById('play-icon');
      const pauseIcon = document.getElementById('pause-icon');
      const progressBar = document.querySelector('.progress-bar');
      const currentTimeDisplay = document.getElementById('current-time');
      
      let isPlaying = false;
      let currentSongIndex = 0;
      let progressInterval;
      let currentCategory = '';
      
      // Sample song data by category
      const songDatabase = {
        sad: [
          { title: "Melancholy Melody", artist: "The Sorrowful Singers" },
          { title: "Rainy Day Blues", artist: "Cloud Watchers" },
          { title: "Lost Without You", artist: "Empty Hearts" }
        ],
        happy: [
          { title: "Dancing in Sunshine", artist: "Happy Harmony" },
          { title: "Jump for Joy", artist: "The Upbeats" },
          { title: "Bright Tomorrow", artist: "Positive Vibes" }
        ],
        rap: [
          { title: "Urban Poetry", artist: "Street Narrator" },
          { title: "Flow Master", artist: "Rhythm & Rhyme" },
          { title: "Beat Box Heroes", artist: "The Lyricists" }
        ],
        pop: [
          { title: "Summer Sensation", artist: "Chart Toppers" },
          { title: "Radio Favorite", artist: "Melody Makers" },
          { title: "Catchy Chorus", artist: "The Hit Factory" }
        ]
      };
      
      // Search functionality
      function performSearch() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        
        if (!searchTerm) return;
        
        if (searchTerm.includes('sad')) {
          loadCategory('sad');
        } else if (searchTerm.includes('happy')) {
          loadCategory('happy');
        } else if (searchTerm.includes('rap')) {
          loadCategory('rap');
        } else if (searchTerm.includes('pop')) {
          loadCategory('pop');
        } else {
          alert('No matching songs found. Try searching for "sad", "happy", "rap", or "pop".');
        }
      }
      
      searchBtn.addEventListener('click', performSearch);
      searchInput.addEventListener('keyup', function(e) {
        if (e.key === 'Enter') {
          performSearch();
        }
      });
      
      // Category selection
      categoryCards.forEach(card => {
        card.addEventListener('click', function() {
          const category = this.getAttribute('data-category');
          
          if (category === 'features' || category === 'contact') {
            alert(`${category.charAt(0).toUpperCase() + category.slice(1)} section clicked!`);
            return;
          }
          
          loadCategory(category);
          
          // Update active card
          categoryCards.forEach(c => c.classList.remove('active'));
          this.classList.add('active');
        });
      });
      
      function loadCategory(category) {
        if (!songDatabase[category]) return;
        
        currentCategory = category;
        currentSongIndex = 0;
        loadSong(currentSongIndex);
        playerContainer.style.display = 'block';
        
        // Simulate playing
        playAudio();
      }
      
      function loadSong(index) {
        if (!songDatabase[currentCategory]) return;
        
